# Generated by Django 3.1.2 on 2020-11-21 22:57

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Exportation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('exportation_original_stocking_rate', models.IntegerField(null=True)),
                ('export', models.IntegerField(null=True)),
                ('person_accepting_import', models.CharField(max_length=30)),
                ('new_stocking_rate', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Farm_Records',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('farm_records_year', models.DateTimeField(null=True)),
                ('farm_records_max_nitrogen_allowed', models.IntegerField(null=True)),
                ('farm_records_max_phospheros_allowed', models.IntegerField(null=True)),
                ('farm_records_opening_stock', models.CharField(max_length=30)),
                ('fertilizer_bought', models.CharField(max_length=30)),
                ('fertilizer_sold', models.CharField(max_length=30)),
                ('closing_stock', models.CharField(max_length=30)),
                ('total_usage', models.IntegerField(null=True)),
                ('balance_under_recommended', models.IntegerField(null=True)),
                ('balance_under_legal_amount', models.IntegerField(null=True)),
                ('import_export_information', models.CharField(max_length=30)),
            ],
        ),
        migrations.CreateModel(
            name='Fertilzer_Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('opening_phospheros', models.IntegerField(null=True)),
                ('opening_nitrogen', models.IntegerField(null=True)),
                ('opening_stock', models.CharField(max_length=30)),
                ('planned_purchases', models.CharField(max_length=30)),
                ('lime', models.IntegerField(null=True)),
                ('legally_allowed_nitrogen', models.IntegerField(null=True)),
                ('legally_allowed_phospheros', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Grassland',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('location', models.CharField(max_length=30)),
                ('year', models.DateTimeField(null=True)),
                ('land', models.CharField(max_length=30)),
                ('type_of_stock', models.CharField(max_length=30)),
                ('organicN', models.IntegerField(null=True)),
                ('organicP', models.IntegerField(null=True)),
                ('grassland_stocking_rate', models.IntegerField(null=True)),
                ('soil_samples', models.CharField(max_length=30)),
                ('reseeding', models.CharField(max_length=30)),
                ('lime_required', models.IntegerField(null=True)),
                ('enterprise', models.CharField(max_length=30)),
                ('imports', models.IntegerField(null=True)),
                ('exports', models.IntegerField(null=True)),
                ('concentrateFed', models.IntegerField(null=True)),
                ('legalN_limit', models.IntegerField(null=True)),
                ('legalP_limit', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Importation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('importation_original_stocking_rate', models.IntegerField(null=True)),
                ('nitrates_and_potassium_figures', models.IntegerField(null=True)),
                ('organic_manure_breakdown', models.IntegerField(null=True)),
                ('exportation_details', models.CharField(max_length=30)),
                ('stocking_rate_including_import', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Monthly_Livestock_Numbers',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('monthly_livestock_numbers', models.CharField(max_length=30)),
                ('type_of_animal', models.CharField(max_length=30)),
                ('organic_nitrates', models.IntegerField(null=True)),
                ('organic_potassium', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Slurry_Storage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('storage_facility', models.CharField(max_length=30)),
                ('location', models.CharField(max_length=30)),
                ('number_of_tanks', models.IntegerField(null=True)),
                ('type_of_tank', models.CharField(max_length=30)),
                ('tank_dimensions', models.IntegerField(null=True)),
                ('tank_capacity', models.IntegerField(null=True)),
                ('enough_storage', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Tillage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tillage_year', models.DateTimeField(null=True)),
                ('tillage_imports', models.IntegerField(null=True)),
                ('area_tillage', models.IntegerField(null=True)),
                ('area_grassland', models.IntegerField(null=True)),
                ('organic_nitrates_applied', models.IntegerField(null=True)),
                ('organic_phospheros_applied', models.IntegerField(null=True)),
                ('applied_potassium', models.IntegerField(null=True)),
                ('field', models.CharField(max_length=30)),
                ('fertilizer_allowed', models.IntegerField(null=True)),
            ],
        ),
    ]
